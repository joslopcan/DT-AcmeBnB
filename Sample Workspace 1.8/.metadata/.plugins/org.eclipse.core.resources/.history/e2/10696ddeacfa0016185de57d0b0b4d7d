
package controllers;

import java.util.ArrayList;
import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.authentication.encoding.Md5PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import security.Authority;
import security.UserAccount;
import security.UserAccountService;
import services.LessorService;
import domain.Lessor;
import forms.LessorRegisterForm;

@Controller
@RequestMapping("/lessor")
public class LessorController extends AbstractController {

	// Services
	@Autowired
	private LessorService		lessorService;
	@Autowired
	private UserAccountService	userAccountService;


	//en este controlador solo se controla la creación de lessor

	public LessorController() {
		super();
	}

	@RequestMapping(value = "/create", method = RequestMethod.GET)
	public ModelAndView create() {
		ModelAndView result;
		Lessor lessor;
		lessor = lessorService.create();
		result = createEditModelAndView(lessor);
		return result;
	}

	//TODO METER EN EL CREATE DE LESSOR EL CHECKBOX PARA COMPROBAR QUE ACEPTA LOS TEMS&CONDITIONS

	@RequestMapping(value = "/edit", method = RequestMethod.POST, params = "save")
	public ModelAndView save(@Valid LessorRegisterForm lessorForm, BindingResult binding) {
		ModelAndView result;
		Lessor lessor;
		lessor = lessorService.reconstruct(lessorForm, binding);
		if(binding.hasErrors()){
			result = createModelAndView(lessor);
		}else{
		try {
			Cook savedCook = cookService.save(cook);

			result = new ModelAndView("redirect:/");
		} catch (Throwable oops) {

			result = createEditModelAndView(cook, "cook.commit.error");
		}

		return result;
	}

	@RequestMapping(value = "/learningMaterialMenu", method = RequestMethod.GET)
	public ModelAndView learningMaterialMenu() {
		ModelAndView result;

		result = new ModelAndView("/cook/learningMaterialMenu");

		return result;
	}

	protected ModelAndView createEditModelAndView(Cook cook) {
		ModelAndView result;

		result = createEditModelAndView(cook, null);

		return result;
	}

	protected ModelAndView createEditModelAndView(Cook cook, String message) {
		ModelAndView result;

		result = new ModelAndView("cook/edit");
		result.addObject("cook", cook);
		result.addObject("message", message);
		return result;

	}
}
